exception = TypeError("a bytes-like object is required, not 'str'")

    @staticmethod
    def _raise_session_broken_exception(exception):
        logger.debug('%s: %s\nBacktrace: \n%s',
                     exception.__class__.__name__,
                     exception,
                     ''.join(traceback.format_list(traceback.extract_tb(
                         sys.exc_info()[2]))))
>       raise RunnerTerminalSessionBroken(exception)
E       crl.interactivesessions.runnerexceptions.RunnerTerminalSessionBroken: a bytes-like object is required, not 'str'

../lib/python3.7/site-packages/crl/interactivesessions/runnerterminal.py:242: RunnerTerminalSessionBroken
---------------------------------------------------- Captured stderr call -----------------------------------------------------
Created new <tests.shells.mock_interactivesession.MockPythonInteractiveSession object at 0x7f0336f93e10>
MainProcess 2019-06-11 14:17:03,057.057 DEBUG Created new <tests.shells.mock_interactivesession.MockPythonInteractiveSession object at 0x7f0336f93e10>
PythonShellEmulator running cmd: import pickle, imp, base64, os, timeout=-1
MainProcess 2019-06-11 14:17:03,063.063 DEBUG PythonShellEmulator running cmd: import pickle, imp, base64, os, timeout=-1
PythonShellEmulator response: 
MainProcess 2019-06-11 14:17:03,063.063 DEBUG PythonShellEmulator response: 
PythonShellEmulator running cmd: _handlercode = compile(pickle.loads(base64.b64decode(b'')), 'RunnerHandler', 'exec'), timeout=-1
MainProcess 2019-06-11 14:17:03,064.064 DEBUG PythonShellEmulator running cmd: _handlercode = compile(pickle.loads(base64.b64decode(b'')), 'RunnerHandler', 'exec'), timeout=-1
PythonShellEmulator response: 
MainProcess 2019-06-11 14:17:03,066.066 DEBUG PythonShellEmulator response: 
PythonShellEmulator running cmd: runnerhandlerns = {}, timeout=-1
MainProcess 2019-06-11 14:17:03,066.066 DEBUG PythonShellEmulator running cmd: runnerhandlerns = {}, timeout=-1
PythonShellEmulator response: 
MainProcess 2019-06-11 14:17:03,066.066 DEBUG PythonShellEmulator response: 
PythonShellEmulator running cmd: exec(_handlercode, runnerhandlerns), timeout=-1
MainProcess 2019-06-11 14:17:03,066.066 DEBUG PythonShellEmulator running cmd: exec(_handlercode, runnerhandlerns), timeout=-1
PythonShellEmulator response: 
MainProcess 2019-06-11 14:17:03,066.066 DEBUG PythonShellEmulator response: 
PythonShellEmulator running cmd: runnerhandlerns['_RUNNERHANDLER'].initialize(contextmgr=runnerhandlerns['_RUNNERHANDLER'].pickle_errors, pickler=pickle, handled_types=runnerhandlerns['_RUNNERHANDLER']._deserialize(b'gANdcQAoTmNidWlsdGlucwpzdHIKcQGFcQJjYnVpbHRpbnMKaW50CnEDY2J1aWx0aW5zCmZsb2F0CnEEZS4=', pickle.Unpickler)), timeout=-1
MainProcess 2019-06-11 14:17:03,067.067 DEBUG PythonShellEmulator running cmd: runnerhandlerns['_RUNNERHANDLER'].initialize(contextmgr=runnerhandlerns['_RUNNERHANDLER'].pickle_errors, pickler=pickle, handled_types=runnerhandlerns['_RUNNERHANDLER']._deserialize(b'gANdcQAoTmNidWlsdGlucwpzdHIKcQGFcQJjYnVpbHRpbnMKaW50CnEDY2J1aWx0aW5zCmZsb2F0CnEEZS4=', pickle.Unpickler)), timeout=-1
PythonShellEmulator response: 
MainProcess 2019-06-11 14:17:03,067.067 DEBUG PythonShellEmulator response: 
PythonShellEmulator running cmd: import collections, timeout=-1
MainProcess 2019-06-11 14:17:03,067.067 DEBUG PythonShellEmulator running cmd: import collections, timeout=-1
PythonShellEmulator response: 
MainProcess 2019-06-11 14:17:03,067.067 DEBUG PythonShellEmulator response: 
MainProcess 2019-06-11 14:17:03,068.068 DEBUG preparing call - collections.namedtuple(*('A', ['a']), **{})
PythonShellEmulator running cmd: runnerhandlerns['_RUNNERHANDLER'].assign_and_run("runnerhandlerns['_PROXY_CONTAINER.handle_ffcdaeededf147048a1c180d6167235f']", "collections.namedtuple(runnerhandlerns['_RUNNERHANDLER']._deserialize(b'gANYAQAAAEFxAC4=', pickle.Unpickler), runnerhandlerns['_RUNNERHANDLER']._deserialize(b'gANdcQBYAQAAAGFxAWEu', pickle.Unpickler))", timeout=3600.0, locals_=locals()), timeout=3630.0
MainProcess 2019-06-11 14:17:03,068.068 DEBUG PythonShellEmulator running cmd: runnerhandlerns['_RUNNERHANDLER'].assign_and_run("runnerhandlerns['_PROXY_CONTAINER.handle_ffcdaeededf147048a1c180d6167235f']", "collections.namedtuple(runnerhandlerns['_RUNNERHANDLER']._deserialize(b'gANYAQAAAEFxAC4=', pickle.Unpickler), runnerhandlerns['_RUNNERHANDLER']._deserialize(b'gANdcQBYAQAAAGFxAWEu', pickle.Unpickler))", timeout=3600.0, locals_=locals()), timeout=3630.0
PythonShellEmulator response: b'gANYCgAAAG5vdGhhbmRsZWRxAEMEgANOLnEBhnECLg=='
MainProcess 2019-06-11 14:17:03,069.069 DEBUG PythonShellEmulator response: b'gANYCgAAAG5vdGhhbmRsZWRxAEMEgANOLnEBhnECLg=='
MainProcess 2019-06-11 14:17:03,069.069 DEBUG TypeError: a bytes-like object is required, not 'str'
Backtrace: 
  File "/home/spaukkon/crl-interactivesessions/.tox/py37/lib/python3.7/site-packages/crl/interactivesessions/runnerterminal.py", line 219, in run
    return self._run_in_session(cmd, timeout)
  File "/home/spaukkon/crl-interactivesessions/.tox/py37/lib/python3.7/site-packages/crl/interactivesessions/runnerterminal.py", line 229, in _run_in_session
    return self._run_full_output(cmd, timeout=timeout).rstrip('\r\n')

